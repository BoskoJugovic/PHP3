<?php
require_once "Korisnik.php";
require_once "TarifniPaket.php";
require_once "TarifniDodatak.php";
require_once "IzradaListinga.php";
require_once "InternetProvajder.php";
require_once "ListingUnos.php";
class PrepaidKorisnik extends Korisnik
{
    protected $kredit;
    protected $tarifniDodaci = [];
    const cenaPrepaidMegabajta = 5;

    /**
     * PrepaidKorisnik constructor.
     * @param $kredit
     */
    public function __construct(InternetProvajder $internetProvajder, string $ime, string $prezime, string $adresa, string $brojUgovora, TarifniPaket $tarifniPaket, float $kredit)
    {
        parent::__construct($internetProvajder, $ime, $prezime, $adresa, $brojUgovora, $tarifniPaket);
        $this->kredit = $kredit;
    }


    public function dopuniKredit(float $kredit)
    {
        $this->kredit =+ $kredit;
    }

    public function surfuj(string $url, int $megabajti): bool
    {
        // TODO: Implement surfuj() method.
        $besplatno = false;
        foreach ($this->tarifniDodaci as $item)
        {
            if(strpos($url, $item->getTipDodatka()) != "")
            {
                $besplatno = true;
                break;
            }
        }

        if($besplatno)
        {
            $listing = new ListingUnos($url, $megabajti);
            $this->dodajListingUnos($listing);
            $this->internetProvajder->zabeleziSaobracaj($this, $url, $megabajti);
            print_r("Besplatno <br>");
        }

        $cena = $megabajti * $this::cenaPrepaidMegabajta;
        if($this->kredit >= $cena)
        {
            $listing = new ListingUnos($url, $megabajti);
            $this->dodajListingUnos($listing);
            $this->internetProvajder->zabeleziSaobracaj($this, $url, $megabajti);
            $this->kredit -= $cena;

            print_r($listing->ispisListinga());
            print_r("Naplaceno {$cena} <br>");
            return true;
        }
        else
        {
            print_r("Nedovljno kredita <br>");
            return false;
        }
    }

    public function dodajTarifniDodatak(TarifniDodatak $tarifniDodatak)
    {
        // TODO: Implement dodajTarifniDodatak() method.
        if($tarifniDodatak->getTipDodatka() == "fiksna_telefonija" || $tarifniDodatak->getTipDodatka() == "iptv" || $tarifniDodatak->getTipDodatka() == null)
        {
            print_r("{$tarifniDodatak->getTipDodatka()} je samo za postpaid korisnike <br>");
            return;
        }
        if ($tarifniDodatak->getCenaDodatka() > $this->kredit)
        {
            print_r("Nedovoljno kredita za {$tarifniDodatak->getTipDodatka()} <br> Cena: {$tarifniDodatak->getCenaDodatka()} <br>Kredit: {$this->kredit} <br>");
            return;
        }
        print_r("Korisnik: {$this->ime} {$this->prezime} {$this->brojUgovora} kupio {$tarifniDodatak->getTipDodatka()} <br>");
        $this->kredit -= $tarifniDodatak->getCenaDodatka();
        array_push($this->tarifniDodaci, $tarifniDodatak);
    }

    public function ispisKorisnika()
    {
        parent::ispisKorisnika(); // TODO: Change the autogenerated stub
        print_r("Kredit: {$this->kredit} <br>Tarifni paket: {$this->tarifniPaket->ispisTarifnogPaketa()} <br>Tarifni dodaci: ");
        foreach ($this->tarifniDodaci as $item)
        {
            $item->ispisDodatka();
        }

    }
}