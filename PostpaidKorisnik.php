<?php
require_once "Korisnik.php";
require_once "TarifniPaket.php";
require_once "TarifniDodatak.php";
require_once "IzradaListinga.php";
require_once "InternetProvajder.php";
require_once "ListingUnos.php";

class PostpaidKorisnik extends Korisnik implements IzradaListinga
{
    protected $prekoracenje;
    protected $tarifniDodaci = [];

    /**
     * PostpaidKorisnik constructor.
     * @param $prekoracenje
     */
    public function __construct(InternetProvajder $internetProvajder, string $ime, string $prezime, string $adresa, string $brojUgovora, TarifniPaket $tarifniPaket, float $prekoracenje = 0)
    {
        parent::__construct($internetProvajder, $ime, $prezime, $adresa, $brojUgovora, $tarifniPaket);
        $this->prekoracenje = $prekoracenje;
    }


    public function ukupnoZaNaplatu()
    {
        $cena = $this->tarifniPaket->getCenaPaketa();
        foreach ($this->tarifniDodaci as $item)
        {
            $cena += $this->prekoracenje;
            return $cena;
        }
    }

    public function surfuj(string $url, int $megabajti): bool
    {
        // TODO: Implement surfuj() method.
        if($this->tarifniPaket->isNeogranicenSaobracaj())
        {
            $listing = new ListingUnos($url, $megabajti);
            $this->dodajListingUnos($listing);
            $this->internetProvajder->zabeleziSaobracaj($this, $url, $megabajti);
            print_r("Neogranicen internet");
            return true;
        }

        $besplatno = false;

        foreach ($this->tarifniDodaci as $item)
        {
            if(strpos($url, $item->getTipDodatka()) != "")
            {
                $besplatno = true;
            }
        }

        if($besplatno)
        {
            $listing = new ListingUnos($url, $megabajti);
            $this->dodajListingUnos($listing);
            $this->internetProvajder->zabeleziSaobracaj($this, $url, $megabajti);
            print_r("Besplatno <br>");
            return true;
        }
        $tarifniMegabajti = $this->tarifniPaket->getMegabajti();
        $tarifniCenaPoMegabajtu = $this->tarifniPaket->getCenaPoMegabajtu();
        $tarifniMegabajti -= $megabajti;
        if ($tarifniMegabajti < 0)
        {
            $tarifniMegabajti = - $tarifniMegabajti;
            $cena = $tarifniMegabajti * $tarifniCenaPoMegabajtu;
            $this->prekoracenje += $cena;
            $tarifniMegabajti = 0;
            $listing = new ListingUnos($url, $megabajti);
            $this->dodajListingUnos($listing);
            $this->internetProvajder->zabeleziSaobracaj($this, $url, $megabajti);
        }
        $listing = new ListingUnos($url, $megabajti);
        $this->internetProvajder->zabeleziSaobracaj($this, $url, $megabajti);
        $this->dodajListingUnos($listing);
        print_r("MB korisnika: {$tarifniMegabajti} <br>");
        return true;
    }


    public function generisiRacun()
    {
        $this->ispisKorisnika();
        print_r("Ukupno : {$this->ukupnoZaNaplatu()} <br>");
    }

    public function dodajTarifniDodatak(TarifniDodatak $tarifniDodatak)
    {
        // TODO: Implement dodajTarifniDodatak() method.

        if($this->tarifniPaket->isNeogranicenSaobracaj())
        {
            if($tarifniDodatak->getTipDodatka() != "iptv" && $tarifniDodatak->getTipDodatka() != "fiksna_telefonija")
            {
                print_r($tarifniDodatak->getTipDodatka() . "mogu koristiti prepaid korisnici <br>");
                return;
            }
        }

        print_r("{$this->ispisKorisnika()} kupio/la {$tarifniDodatak->getTipDodatka()} <br> ");
        array_push($this->tarifniDodaci, $tarifniDodatak);
    }

    public function ispisKorisnika()
    {
        parent::ispisKorisnika(); // TODO: Change the autogenerated stub
        print_r("Tarifni paket: {$this->tarifniPaket->ispisTarifnogPaketa()} <br>Tarifni dodaci: ");
        foreach ($this->tarifniDodaci as $item)
        {
            $item->ispisDodatka();
        }
        print_r("<br>Prekoracenje: {$this->prekoracenje} <br>Ukupno: {$this->ukupnoZaNaplatu()} <br>");

    }
}